"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function nameFromParentPath(parentPath) {
    return parentPath ? parentPath.split('/').map(function (p) { return upperFirst(p.split('(').shift()); }).join('') : '';
}
function operationName(parentPath, name) {
    return "" + upperFirst(nameFromParentPath(parentPath)) + (parentPath ? '' : upperFirst(name));
}
function typeNameFromCollectionType(type) {
    return isCollection(type) ? type.split(/[()]/)[1] : type;
}
function typeNameFromType(type) {
    return type.split('.').pop();
}
function fullTypeNameFromCollectionType(type) {
    return typeNameFromType(typeNameFromCollectionType(type));
}
function isCollection(name) {
    return name.startsWith('Collection(');
}
function isBindingParameter(name) {
    return name.toLowerCase() == 'bindingparameter' || name.toLowerCase() == 'bindparameter';
}
function parametersWithoutBindingParameter(parameters) {
    return parameters.filter(function (p) { return !isBindingParameter(p.name); });
}
function bindingParameterFromParameters(parameters) {
    return parameters ? parameters.find(function (p) { return isBindingParameter(p.name); }) : null;
}
function pathParametersFromParameters(parameters) {
    return parametersWithoutBindingParameter(parameters || []).map(function (p) {
        return p.type == 'string'
            ? p.name + "='{" + p.name + "}'"
            : p.name + "={" + p.name + "}";
    }).join(',');
}
function isFunction(item, options) {
    return options.functions && options.functions.indexOf(item) != -1;
}
var defaultResponse = {
    description: 'Unexpected error',
    schema: {
        $ref: '#/definitions/Error'
    }
};
function defaultEntitySetParameters(oDataVersion) {
    return [{
            name: '$filter',
            type: 'string',
            required: false,
            in: 'query'
        },
        {
            name: '$top',
            type: 'integer',
            required: false,
            in: 'query'
        },
        {
            name: '$skip',
            type: 'integer',
            required: false,
            in: 'query'
        },
        {
            name: '$orderby',
            type: 'string',
            required: false,
            in: 'query'
        },
        {
            name: '$expand',
            type: 'string',
            required: false,
            in: 'query'
        },
        {
            name: oDataVersion == '4.0' ? '$count' : '$inlinecount',
            type: oDataVersion == '4.0' ? 'boolean' : 'string',
            required: false,
            in: 'query'
        }];
}
var registeredOperations = new Set();
function verifyOperationIdUniqueness(operationId) {
    if (registeredOperations.has(operationId)) {
        throw new Error(operationId + " is a duplicate operationId.");
    }
    registeredOperations.add(operationId);
    return operationId;
}
function parentKeyParameters(parentTypes) {
    var parameters = [];
    var i = 0;
    (parentTypes || []).filter(function (v, i, a) { return a.indexOf(v) === i; }).forEach(function (pt) {
        (pt.key || []).forEach(function (entityProperty) {
            var _a = property(entityProperty.type), type = _a.type, format = _a.format;
            var parameter = {
                name: i > 0 ? "" + lowerFirst(pt.name) + upperFirst(entityProperty.name) : "" + entityProperty.name,
                required: true,
                in: 'path',
                type: type
            };
            if (format) {
                parameter.format = format;
            }
            if (!parameters.find(function (p) { return p.name == parameter.name; })) {
                parameters.push(parameter);
            }
            i++;
        });
    });
    return parameters;
}
function keyParameters(entitySet, parentTypes, parentType) {
    var parameters = parentKeyParameters(parentTypes);
    entitySet.entityType.key.forEach(function (entityProperty) {
        var _a = property(entityProperty.type), type = _a.type, format = _a.format;
        var parameter = {
            name: parentType ? "" + lowerFirst(entitySet.entityType.name) + upperFirst(entityProperty.name) : "" + entityProperty.name,
            required: true,
            in: 'path',
            type: type
        };
        if (format) {
            parameter.format = format;
        }
        if (!parameters.find(function (p) { return p.name == parameter.name; })) {
            parameters.push(parameter);
        }
    });
    return parameters;
}
function keyNames(entitySet, parentType) {
    if (entitySet.entityType.key) {
        return entitySet.entityType.key.map(function (property) {
            if (!property.wrapValueInQuotesInUrls) {
                return parentType ? "{" + lowerFirst(entitySet.entityType.name) + upperFirst(property.name) + "}" : "{" + property.name + "}";
            }
            return parentType ? "'{" + lowerFirst(entitySet.entityType.name) + upperFirst(property.name) + "}'" : "'{" + property.name + "}'";
        });
    }
    return [];
}
function entitySetParameters(typeAnnotations, parentTypes, oDataVersion) {
    var parameters = parentKeyParameters(parentTypes).concat(defaultEntitySetParameters(oDataVersion));
    if (typeAnnotations) {
        typeAnnotations.forEach(function (a) {
            if (a.indexOf('SkipSupported') != -1) {
                var skipIndex = parameters.findIndex(function (p) { return p.name == '$skip'; });
                if (skipIndex != -1) {
                    parameters.splice(skipIndex, 1);
                }
            }
            if (a.indexOf('TopSupported') != -1) {
                var topIndex = parameters.findIndex(function (p) { return p.name == '$top'; });
                if (topIndex != -1) {
                    parameters.splice(topIndex, 1);
                }
            }
            if (a.indexOf('CountRestrictions') != -1) {
                var countIndex = parameters.findIndex(function (p) { return p.name == '$count'; });
                if (countIndex != -1) {
                    parameters.splice(countIndex, 1);
                }
            }
            if (a.indexOf('FilterRestrictions') != -1) {
                var filterIndex = parameters.findIndex(function (p) { return p.name == '$filter'; });
                if (filterIndex != -1) {
                    parameters.splice(filterIndex, 1);
                }
            }
            if (a.indexOf('ExpandRestrictions') != -1) {
                var expandIndex = parameters.findIndex(function (p) { return p.name == '$expand'; });
                if (expandIndex != -1) {
                    parameters.splice(expandIndex, 1);
                }
            }
            if (a.indexOf('SortRestrictions') != -1) {
                var orderbyIndex = parameters.findIndex(function (p) { return p.name == '$orderby'; });
                if (orderbyIndex != -1) {
                    parameters.splice(orderbyIndex, 1);
                }
            }
        });
    }
    return parameters;
}
function entitySetGet(entitySet, parentTypes, parentPath, oDataVersion) {
    return {
        operationId: verifyOperationIdUniqueness("get" + operationName(parentPath, entitySet.name)),
        summary: "get" + operationName(parentPath, entitySet.name),
        parameters: entitySetParameters(entitySet.annotations, parentTypes, oDataVersion),
        responses: {
            '200': {
                description: "List of " + entitySet.entityType.name,
                schema: {
                    type: 'object',
                    properties: {
                        value: {
                            type: 'array',
                            items: {
                                $ref: "#/definitions/" + entitySet.namespace + "." + entitySet.entityType.name
                            }
                        }
                    }
                }
            },
            default: defaultResponse
        }
    };
}
function operationNameForType(entityTypeName, entitySetName, parentPath, prefix, suffix) {
    var operationId = "" + (prefix || '') + operationName(parentPath, entityTypeName) + (suffix || '');
    if (registeredOperations.has(operationId)) {
        operationId = "" + (prefix || '') + operationName(parentPath, entitySetName + entityTypeName) + (suffix || '');
    }
    return operationId;
}
function entitySetPost(entitySet, parentTypes, parentPath) {
    return {
        operationId: verifyOperationIdUniqueness("" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, 'create')),
        summary: "" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, 'create'),
        parameters: parentKeyParameters(parentTypes).concat([
            {
                name: entitySet.entityType.name,
                in: 'body',
                required: true,
                schema: {
                    $ref: "#/definitions/" + entitySet.namespace + "." + entitySet.entityType.name
                }
            }
        ]),
        responses: {
            '201': {
                description: "Created entity",
                schema: {
                    $ref: "#/definitions/" + entitySet.namespace + "." + entitySet.entityType.name
                }
            },
            default: defaultResponse
        }
    };
}
function entitySetOperations(entitySet, parentTypes, parentPath, oDataVersion) {
    return {
        get: entitySetGet(entitySet, parentTypes, parentPath, oDataVersion),
        post: entitySetPost(entitySet, parentTypes, parentPath)
    };
}
function entityTypeOperations(entitySet, parentTypes, parentType, parentPath) {
    var operations = {
        get: entityTypeGet(entitySet, parentTypes, parentType, parentPath),
        delete: entityTypeDelete(entitySet, parentTypes, parentType, parentPath),
        patch: entityTypeUpdate('update', entitySet, parentTypes, parentType, parentPath)
    };
    if (parentPath) {
        operations['put'] = entityTypeUpdate('put', entitySet, parentTypes, parentType, parentPath);
    }
    return operations;
}
function entityTypeGet(entitySet, parentTypes, parentType, parentPath) {
    return {
        operationId: verifyOperationIdUniqueness("" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, 'get', 'ById')),
        summary: "" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, 'get', 'ById'),
        parameters: keyParameters(entitySet, parentTypes, parentType),
        responses: {
            '200': {
                description: "A " + entitySet.entityType.name + ".",
                schema: {
                    $ref: "#/definitions/" + entitySet.namespace + "." + entitySet.entityType.name
                }
            },
            default: defaultResponse
        }
    };
}
function entityTypeDelete(entitySet, parentTypes, parentType, parentPath) {
    return {
        operationId: verifyOperationIdUniqueness("" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, 'delete')),
        summary: "" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, 'delete'),
        parameters: keyParameters(entitySet, parentTypes, parentType),
        responses: {
            '204': {
                description: "Empty response.",
            },
            default: defaultResponse
        }
    };
}
function entityTypeUpdate(prefix, entitySet, parentTypes, parentType, parentPath) {
    var parameters = keyParameters(entitySet, parentTypes, parentType);
    parameters.push({
        name: entitySet.entityType.name,
        in: 'body',
        required: true,
        schema: {
            $ref: "#/definitions/" + entitySet.namespace + "." + entitySet.entityType.name
        }
    });
    return {
        operationId: verifyOperationIdUniqueness("" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, prefix)),
        summary: "" + operationNameForType(entitySet.entityType.name, entitySet.name, parentPath, prefix),
        parameters: parameters,
        responses: {
            '200': {
                description: "A " + entitySet.entityType.name + ".",
                schema: {
                    $ref: "#/definitions/" + entitySet.namespace + "." + entitySet.entityType.name
                }
            },
            '204': {
                description: "Empty response.",
            },
            default: defaultResponse
        }
    };
}
function addActionsAndFunctionsToPaths(paths, entitySets, options) {
    var actionsAndFunctions = [].concat(options.actions || []).concat(options.functions || []);
    actionsAndFunctions.forEach(function (item) {
        var isFunc = isFunction(item, options);
        var verb = isFunc ? 'get' : 'post';
        var parameters = actionOrFunctionParameters(item, isFunc);
        var responses = actionOrFunctionResponses(item);
        var pathParameters = isFunc ? pathParametersFromParameters(item.parameters) : '';
        if (item.isBound) {
            var bindingParameter_1 = bindingParameterFromParameters(item.parameters);
            if (bindingParameter_1) {
                var entitySet = void 0;
                var params = void 0;
                var keyParams_1 = [];
                if (isCollection(bindingParameter_1.type)) {
                    entitySet = entitySets.find(function (es) { return es.entityType.name == fullTypeNameFromCollectionType(bindingParameter_1.type); });
                }
                else {
                    entitySet = entitySets.find(function (es) { return es.entityType.name == typeNameFromType(bindingParameter_1.type); });
                    if (entitySet && entitySet.entityType.key) {
                        entitySet.entityType.key.forEach(function (property) {
                            keyParams_1.push({
                                name: "" + property.name,
                                required: true,
                                in: 'path',
                                type: edmTypeToSwaggerType(property.type).name
                            });
                        });
                        params = "(" + keyNames(entitySet).join(',') + ")";
                    }
                }
                if (entitySet) {
                    var itemPath = "" + entitySet.name + (params || '') + "/" + (options.defaultNamespace ? options.defaultNamespace + '.' : '') + item.name;
                    setActionOrFunctionOperation(item, paths, "/" + itemPath + "(" + pathParameters + ")", verb, parameters.concat(keyParams_1), responses, options.defaultNamespace);
                }
            }
        }
        else {
            setActionOrFunctionOperation(item, paths, "/" + item.name + "(" + pathParameters + ")", verb, parameters, responses, options.defaultNamespace);
        }
    });
}
function addContainmentActionsAndFunctionsBoundToCollectionToPaths(paths, path, entitySet, options, entityTypePath, parentTypes) {
    var containmentBoundFunctionsOrActions = [].concat(options.actions || []).concat(options.functions || []).filter(function (i) { return i.isBound &&
        i.parameters.find(function (par) { return isBindingParameter(par.name) && par.type == path.type; }); });
    containmentBoundFunctionsOrActions.forEach(function (item) {
        var isFunc = isFunction(item, options);
        var pathParameters = isFunc ? pathParametersFromParameters(item.parameters) : '';
        var itemParameters = actionOrFunctionParameters(item, isFunc);
        var keyParams = parentKeyParameters(parentTypes);
        if (entitySet.entityType.key) {
            entitySet.entityType.key.forEach(function (property) {
                var paramName = keyParams.length > 0 ? "" + lowerFirst(entitySet.entityType.name) + upperFirst(property.name) : "" + property.name;
                if (!keyParams.find(function (kp) { return kp.name == paramName; }) && !itemParameters.find(function (p) { return p.name == paramName; })) {
                    keyParams.push({
                        name: paramName,
                        required: true,
                        in: 'path',
                        type: edmTypeToSwaggerType(property.type).name
                    });
                }
            });
        }
        setActionOrFunctionOperation(item, paths, entityTypePath + "/" + path.name + "/" + (options.defaultNamespace ? options.defaultNamespace + '.' : '') + item.name + "(" + pathParameters + ")", isFunc ? 'get' : 'post', itemParameters.concat(keyParams), actionOrFunctionResponses(item), options.defaultNamespace);
    });
}
function addContainmentPathsRecursive(paths, entitySet, options, entityTypePath, parentPath, parentTypes, parentType, oDataVersion) {
    if (entitySet.entityType.paths) {
        entitySet.entityType.paths.filter(function (p) { return entityTypePath.indexOf("/" + p.name) == -1 || entityTypePath.indexOf("/" + p.name + "(") == -1; }).forEach(function (p) {
            if (isCollection(p.type)) {
                // Collection: GET, POST, etc.
                var typeName_1 = typeNameFromCollectionType(p.type);
                var entityType = options.entityTypes.find(function (et) { return entitySet.namespace + "." + et.name == typeName_1; });
                if (entityType) {
                    addContainmentActionsAndFunctionsBoundToCollectionToPaths(paths, p, entitySet, options, entityTypePath, parentTypes);
                    if (!paths[entityTypePath + "/" + p.name]) {
                        pathsRecursive({
                            entitySets: [{
                                    name: p.name,
                                    entityType: entityType,
                                    namespace: entitySet.namespace
                                }],
                            options: options,
                            oDataVersion: oDataVersion,
                            paths: paths,
                            parentPath: entityTypePath,
                            parentTypes: parentTypes ? parentTypes.concat([entitySet.entityType]) : [entitySet.entityType],
                            parentType: entitySet.entityType
                        });
                    }
                }
            }
            else {
                // Single entity: GET and PUT
                var entityType = options.entityTypes.find(function (et) { return entitySet.namespace + "." + et.name == p.type; });
                if (entityType) {
                    var keyPath = entitySet.name + "(" + keyNames(entitySet, parentType).join(',') + ")";
                    var entityTypePath_1 = (parentPath || '') + "/" + keyPath + "/" + p.name;
                    if (!paths[entityTypePath_1]) {
                        var oid = "" + upperFirst(nameFromParentPath(parentPath)) + upperFirst(entitySet.name) + upperFirst(p.name);
                        paths[entityTypePath_1] = {
                            get: {
                                operationId: verifyOperationIdUniqueness("get" + oid),
                                summary: "get" + oid,
                                parameters: keyParameters(entitySet, parentTypes, parentType),
                                responses: {
                                    '200': {
                                        description: "A " + p.name + ".",
                                        schema: {
                                            $ref: "#/definitions/" + p.type
                                        }
                                    },
                                    default: defaultResponse
                                }
                            },
                            put: {
                                operationId: verifyOperationIdUniqueness("put" + oid),
                                summary: "put" + oid,
                                parameters: keyParameters(entitySet, parentTypes, parentType).concat([{
                                        name: p.name,
                                        in: 'body',
                                        required: true,
                                        schema: {
                                            $ref: "#/definitions/" + p.type
                                        }
                                    }]),
                                responses: {
                                    '200': {
                                        description: "A " + p.name + ".",
                                        schema: {
                                            $ref: "#/definitions/" + p.type
                                        }
                                    },
                                    '204': {
                                        description: "Empty response.",
                                    },
                                    default: defaultResponse
                                }
                            }
                        };
                    }
                }
            }
        });
    }
}
function addSingletonsToPaths(paths, options) {
    if (options.singletons) {
        options.singletons.forEach(function (singleton) {
            var singletonPath = "/" + singleton.name;
            paths[singletonPath] = {
                get: {
                    operationId: verifyOperationIdUniqueness("get" + upperFirst(singleton.name)),
                    summary: "get" + upperFirst(singleton.name),
                    parameters: [],
                    responses: {
                        '200': {
                            description: "A " + singleton.type + ".",
                            schema: {
                                $ref: "#/definitions/" + singleton.type
                            }
                        },
                        default: defaultResponse
                    }
                }
            };
            if (singleton.properties) {
                singleton.properties.filter(function (p) { return singletonPath.indexOf("/" + p.name) == -1 || singletonPath.indexOf("/" + p.name + "(") == -1; }).forEach(function (p) {
                    if (isCollection(p.type)) {
                        var typeName_2 = typeNameFromCollectionType(p.type);
                        var entityType = options.entityTypes.find(function (et) { return options.defaultNamespace + "." + et.name == typeName_2; });
                        if (entityType) {
                        }
                    }
                    else {
                        var entityType = options.entityTypes.find(function (et) { return options.defaultNamespace + "." + et.name == p.type; });
                        if (entityType) {
                            var entityTypePath = "/" + singleton.name + "/" + p.name;
                            if (!paths[entityTypePath]) {
                                var oid = "get" + upperFirst(singleton.name) + upperFirst(p.name);
                                paths[entityTypePath] = {
                                    get: {
                                        operationId: verifyOperationIdUniqueness(oid),
                                        summary: oid,
                                        parameters: [],
                                        responses: {
                                            '200': {
                                                description: "A " + p.name + ".",
                                                schema: {
                                                    $ref: "#/definitions/" + p.type
                                                }
                                            },
                                            default: defaultResponse
                                        }
                                    }
                                };
                            }
                        }
                    }
                });
            }
        });
    }
}
function pathsRecursive(_a) {
    var entitySets = _a.entitySets, options = _a.options, oDataVersion = _a.oDataVersion, paths = _a.paths, parentPath = _a.parentPath, parentTypes = _a.parentTypes, parentType = _a.parentType;
    entitySets.forEach(function (entitySet) {
        var entitySetPath = (parentPath || '') + "/" + entitySet.name;
        paths[entitySetPath] = entitySetOperations(entitySet, parentTypes, parentType ? entitySetPath : null, oDataVersion);
        if (entitySet.entityType.key) {
            var keyPath = entitySet.name + "(" + keyNames(entitySet, parentType).join(',') + ")";
            var entityTypePath = (parentPath || '') + "/" + keyPath;
            paths[entityTypePath] = entityTypeOperations(entitySet, parentTypes, parentType, parentType ? entityTypePath : null);
            entitySet.entityType.properties.filter(function (p) { return p.type == 'Edm.Stream'; }).forEach(function (p) {
                var nameParameter = "fileName";
                var parameters = keyParameters(entitySet, parentTypes, parentType).concat([{
                        name: nameParameter,
                        in: 'path',
                        required: true,
                        type: 'object'
                    }, {
                        name: 'file',
                        in: 'body',
                        required: true,
                        type: 'object'
                    }]);
                var propertyPutPath = (parentPath || '') + "/" + entitySet.name + "('{" + nameParameter + "}')/" + p.name;
                if (!paths[propertyPutPath]) {
                    paths[propertyPutPath] = {
                        put: {
                            operationId: verifyOperationIdUniqueness("upload" + operationName(parentPath, entitySet.entityType.name) + upperFirst(entitySet.name) + upperFirst(p.name)),
                            summary: "upload" + operationName(parentPath, entitySet.entityType.name) + upperFirst(entitySet.name) + upperFirst(p.name),
                            parameters: parameters,
                            responses: {
                                '200': {
                                    description: "A " + entitySet.entityType.name + ".",
                                    schema: {
                                        $ref: "#/definitions/" + entitySet.namespace + "." + entitySet.entityType.name
                                    }
                                },
                                '204': {
                                    description: "Empty response.",
                                },
                                default: defaultResponse
                            }
                        }
                    };
                }
            });
            addContainmentPathsRecursive(paths, entitySet, options, entityTypePath, parentPath, parentTypes, parentType, oDataVersion);
        }
    });
    if (!parentPath) {
        addSingletonsToPaths(paths, options);
        addActionsAndFunctionsToPaths(paths, entitySets, options);
    }
    return paths;
}
function setActionOrFunctionOperation(actionOrFunction, paths, path, verb, parameters, responses, defaultNamespace) {
    if (!paths[path]) {
        var oid = actionOrFunctionName(actionOrFunction, registeredOperations, path, defaultNamespace);
        var operationId = verifyOperationIdUniqueness(oid);
        var summary = operationId;
        paths[path] = {};
        paths[path][verb] = {
            operationId: operationId,
            summary: summary,
            parameters: parameters,
            responses: responses
        };
    }
}
function upperFirst(string) {
    return string.charAt(0).toUpperCase() + string.slice(1);
}
function lowerFirst(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
}
function actionOrFunctionName(action, registeredOperations, path, defaultNamespace) {
    var parameters = action.parameters ? parametersWithoutBindingParameter(action.parameters).map(function (p) { return upperFirst(p.name); }).join('') : '';
    if (action.isBound) {
        var boundType = void 0;
        var bindingParameter = bindingParameterFromParameters(action.parameters);
        if (bindingParameter) {
            boundType = isCollection(bindingParameter.type) ? typeNameFromCollectionType(bindingParameter.type) : bindingParameter.type;
        }
        var parentPath = nameFromParentPath(path.replace("/" + (defaultNamespace ? defaultNamespace + '.' + action.name : action.name), ''));
        return "" + lowerFirst(parentPath) + (boundType ? upperFirst(typeNameFromType(boundType)) : '') + upperFirst(action.name) + (parameters ? 'By' + parameters : '');
    }
    else {
        if (!registeredOperations.has(action.name)) {
            return lowerFirst(action.name);
        }
        else {
            return "" + lowerFirst(action.name) + (parameters ? 'By' + parameters : '');
        }
    }
}
function actionOrFunctionResponses(action) {
    var response = {
        default: defaultResponse
    };
    if (action.returnType) {
        if (isCollection(action.returnType.type)) {
            var swaggerType = edmTypeToSwaggerType(typeNameFromCollectionType(action.returnType.type));
            response['200'] = swaggerType.isPrimitive ? {
                schema: {
                    properties: {
                        value: {
                            items: {
                                type: swaggerType.name
                            },
                            type: "array"
                        }
                    },
                    type: "object"
                }
            } : {
                schema: {
                    properties: {
                        value: {
                            items: {
                                $ref: "#/definitions/" + swaggerType.name
                            },
                            type: "array"
                        }
                    },
                    type: "object"
                }
            };
        }
        else {
            var swaggerType = edmTypeToSwaggerType(action.returnType.type);
            response['200'] = swaggerType.isPrimitive ? {
                schema: {
                    type: swaggerType.name
                }
            } : {
                schema: {
                    $ref: "#/definitions/" + swaggerType.name
                }
            };
        }
    }
    else {
        response['204'] = { description: "Empty response." };
    }
    return response;
}
function actionOrFunctionParameters(action, isFunction) {
    var inValue = isFunction ? 'path' : 'body';
    var parameters = (action.parameters || []);
    return (action.isBound ? parametersWithoutBindingParameter(parameters) : parameters)
        .map(function (actionParameter) {
        var type = actionParameter.type, name = actionParameter.name, nullable = actionParameter.nullable;
        if (isCollection(type)) {
            return {
                name: name,
                required: nullable == false ? true : false,
                in: inValue,
                type: 'array',
                items: {
                    type: edmTypeToSwaggerType(typeNameFromCollectionType(type)).name
                }
            };
        }
        else {
            return {
                name: name,
                required: nullable == false ? true : false,
                in: inValue,
                type: edmTypeToSwaggerType(type).name
            };
        }
    });
}
function definitions(entitySets, complexTypes, singletons, entityTypes, enumTypes) {
    var definitions = {
        'Error': {
            type: 'object',
            properties: {
                error: {
                    type: 'object',
                    properties: {
                        code: {
                            type: 'string'
                        },
                        message: {
                            type: 'string'
                        }
                    }
                }
            }
        }
    };
    var enumTypesDic = enumTypes ? enumTypes.reduce(function (dicSoFar, currentEnumType) {
        dicSoFar[currentEnumType.namespace + "." + currentEnumType.name] = currentEnumType.memberNames;
        return dicSoFar;
    }, {}) : {};
    entitySets.filter(function (es) { return es; }).forEach(function (entitySet) {
        var type = entitySet.namespace + "." + entitySet.entityType.name;
        definitions[definitions[type] ? entitySet.namespace + "." + entitySet.name : type] = schema(entitySet.entityType, enumTypesDic);
    });
    if (complexTypes) {
        complexTypes.filter(function (t) { return t; }).forEach(function (complexType) {
            definitions[complexType.namespace + "." + complexType.name] = schema(complexType, enumTypesDic);
        });
    }
    if (entityTypes) {
        entityTypes.filter(function (t) { return t; }).forEach(function (entityType) {
            definitions[entityType.namespace + "." + entityType.name] = schema(entityType, enumTypesDic);
        });
    }
    if (singletons) {
        singletons.forEach(function (s) {
            definitions[s.name] = singleton(s);
        });
    }
    return definitions;
}
function schema(entityType, enumTypesDictionary) {
    var required = entityType.properties ? entityType.properties.filter(function (property) { return property.required; }).map(function (property) { return property.name; }) : [];
    var schema = {
        type: 'object'
    };
    if (entityType.properties) {
        schema.properties = properties(entityType.properties, enumTypesDictionary);
    }
    if (required.length > 0) {
        schema.required = required;
    }
    return schema;
}
function singleton(entityType) {
    var schema = {
        type: 'object',
        properties: entityType.properties ? singletonProperties(entityType.properties) : []
    };
    return schema;
}
function singletonProperties(properties) {
    var result = {};
    properties.forEach(function (_a) {
        var name = _a.name, type = _a.type;
        result[name] = {
            type: isCollection(type) ? 'array' : 'object'
        };
        if (isCollection(type)) {
            result[name]['items'] = {
                $ref: "#/definitions/" + fullTypeNameFromCollectionType(type)
            };
        }
        else {
            result[name]['$ref'] = "#/definitions/" + fullTypeNameFromCollectionType(type);
        }
    });
    return result;
}
function properties(properties, enumTypesDictionary) {
    var result = {};
    properties.forEach(function (p) {
        var name = p.name, type = p.type, items = p.items, $ref = p.$ref;
        result[name] = property(type, enumTypesDictionary);
        if (items) {
            if (items.$ref) {
                var schemaToDeReference = items.$ref.replace('#/definitions/', '');
                if (enumTypesDictionary[schemaToDeReference]) {
                    result[name].items = property(schemaToDeReference, enumTypesDictionary);
                }
            }
            if (!result[name].items) {
                var itemsAsProperty = property(items.type, enumTypesDictionary);
                if (itemsAsProperty.type === 'object' || itemsAsProperty.type === 'array') {
                    result[name].items = items;
                }
                else {
                    result[name].items = itemsAsProperty;
                }
            }
        }
        if ($ref) {
            result[name]["$ref"] = $ref;
        }
        if (p["x-ref"]) {
            result[name]["x-ref"] = p["x-ref"];
        }
    });
    return result;
}
function edmTypeToSwaggerType(type) {
    var swaggerType;
    switch (type) {
        case 'Edm.Int16':
        case 'Edm.Int32':
        case 'Edm.Int64':
            swaggerType = 'integer';
            break;
        case 'Edm.Boolean':
            swaggerType = 'boolean';
            break;
        case 'Edm.String':
        case 'Edm.Byte':
        case 'Edm.Binary':
        case 'Edm.DateTime':
        case 'Edm.DateTimeOffset':
        case 'Edm.Date':
        case 'Edm.Guid':
        case 'Edm.Duration':
            swaggerType = 'string';
            break;
        case 'Edm.Decimal':
        case 'Edm.Double':
        case 'Edm.Single':
            swaggerType = 'number';
            break;
    }
    return swaggerType ? {
        isPrimitive: true,
        name: swaggerType
    } : {
        isPrimitive: false,
        name: type
    };
}
function property(type, enumTypesDictionary) {
    var property = {
        type: type == 'array' ? 'array' : 'object'
    };
    if (enumTypesDictionary && enumTypesDictionary[type]) {
        property.type = 'string';
        property.enum = enumTypesDictionary[type];
    }
    switch (type) {
        case 'Edm.Int16':
        case 'Edm.Int32':
            property.type = 'integer';
            property.format = 'int32';
            break;
        case 'Edm.Int64':
            property.type = 'integer';
            property.format = 'int64';
            break;
        case 'Edm.Boolean':
            property.type = 'boolean';
            break;
        case 'Edm.String':
            property.type = 'string';
            break;
        case 'Edm.Byte':
            property.type = 'string';
            property.format = 'byte';
            break;
        case 'Edm.Duration':
            property.type = 'string';
            property.format = 'duration';
            break;
        case 'Edm.Binary':
            property.type = 'string';
            property.format = 'base64';
            break;
        case 'Edm.DateTime':
        case 'Edm.DateTimeOffset':
            property.type = 'string';
            property.format = 'date-time';
            break;
        case 'Edm.Date':
            property.type = 'string';
            property.format = 'date';
            break;
        case 'Edm.Decimal':
        case 'Edm.Double':
            property.type = 'number';
            property.format = 'double';
            break;
        case 'Edm.Guid':
            property.type = 'string';
            property.format = 'uuid';
            break;
        case 'Edm.Single':
            property.type = 'number';
            property.format = 'single';
            break;
    }
    if (property.type === 'object' && type && type !== 'object' && !type.startsWith('Edm.')) {
        property['$ref'] = "#/definitions/" + type;
    }
    return property;
}
function filter(entitySets, wanted) {
    return entitySets.filter(function (entitySet) { return wanted.includes(entitySet.name); });
}
function convert(allEntitySets, options, oDataVersion) {
    var _a;
    registeredOperations.clear();
    var entitySets = options.include ? filter(allEntitySets, options.include) : allEntitySets;
    var paths = pathsRecursive({ entitySets: entitySets, options: options, oDataVersion: oDataVersion, paths: {} });
    return {
        swagger: '2.0',
        host: options.host,
        produces: ['application/json'],
        basePath: options.basePath || '/',
        info: (_a = {
                title: 'OData Service',
                version: '0.0.1'
            },
            _a['x-odata-version'] = oDataVersion,
            _a),
        paths: paths,
        definitions: definitions(entitySets, options.complexTypes, options.singletons, options.entityTypes, options.enumTypes)
    };
}
exports.default = convert;
//# sourceMappingURL=convert.js.map